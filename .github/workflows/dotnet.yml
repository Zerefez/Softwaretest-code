name: SoftwareTest-RAAAAA

on:
  workflow_dispatch:
    inputs:
      project:
        description: "Path to the specific project (leave empty for all)"
        required: false
        default: ""

  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    - name: Restore dependencies
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.project }}" ]; then
          dotnet restore "${{ github.event.inputs.project }}"
        else
          for proj in $(find . -name "*.csproj"); do
            dotnet restore "$proj"
          done
        fi
    - name: Build
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.project }}" ]; then
          dotnet build "${{ github.event.inputs.project }}" --no-restore
        else
          for proj in $(find . -name "*.csproj"); do
            dotnet build "$proj" --no-restore
          done
        fi

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    - name: Restore dependencies
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.project }}" ]; then
          dotnet restore "${{ github.event.inputs.project }}"
        else
          for proj in $(find . -name "*.csproj"); do
            dotnet restore "$proj"
          done
        fi
    - name: Run Tests with Coverage
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.project }}" ]; then
          dotnet test "${{ github.event.inputs.project }}" --verbosity normal --collect:"XPlat Code Coverage" --settings coverlet.runsettings
        else
          for test_proj in $(find . -name "*Test*.csproj"); do
            dotnet test "$test_proj" --verbosity normal --collect:"XPlat Code Coverage" --settings coverlet.runsettings
          done
        fi
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: "**/coverage.cobertura.xml"
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: Generate Coverage Summary
      run: reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:TextSummary
    - name: Display Coverage Summary
      run: cat coveragereport/Summary.txt
