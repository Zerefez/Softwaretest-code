name: .NET CI

on:
  workflow_dispatch:
    inputs:
      project:
        description: "Path to the specific project (leave empty for all)"
        required: false
        default: ""

  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    - name: Restore dependencies
      run: |
        if [ -z "${{ github.event.inputs.project }}" ]; then
          dotnet restore
        else
          dotnet restore "${{ github.event.inputs.project }}"
        fi
    - name: Build
      run: |
        if [ -z "${{ github.event.inputs.project }}" ]; then
          dotnet build --no-restore
        else
          dotnet build "${{ github.event.inputs.project }}" --no-restore
        fi

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    - name: Restore dependencies
      run: |
        if [ -z "${{ github.event.inputs.project }}" ]; then
          dotnet restore
        else
          dotnet restore "${{ github.event.inputs.project }}"
        fi
    - name: Run Tests with Coverage
      run: |
        mkdir -p TestResults
        if [ -z "${{ github.event.inputs.project }}" ]; then
          for test_proj in $(find . -name "*Test*.csproj"); do
            proj_name=$(basename "$test_proj" .csproj)
            dotnet test "$test_proj" --verbosity normal --collect:"XPlat Code Coverage" --results-directory "TestResults/$proj_name" --settings coverlet.runsettings
          done
        else
          proj_name=$(basename "${{ github.event.inputs.project }}" .csproj)
          dotnet test "${{ github.event.inputs.project }}" --verbosity normal --collect:"XPlat Code Coverage" --results-directory "TestResults/$proj_name" --settings coverlet.runsettings
        fi
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: Generate and Display Coverage Summaries
      run: |
        for report in TestResults/*/coverage.cobertura.xml; do
          if [ -f "$report" ]; then
            report_dir=$(dirname "$report")
            reportgenerator -reports:"$report" -targetdir:"$report_dir/coveragereport" -reporttypes:TextSummary
            echo "Coverage summary for $(basename $report_dir):"
            cat "$report_dir/coveragereport/Summary.txt"
          fi
        done
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-reports
        path: TestResults/*/coveragereport/Summary.txt
